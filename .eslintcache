[{"D:\\allinone\\web\\src\\index.tsx":"1","D:\\allinone\\web\\src\\reportWebVitals.ts":"2","D:\\allinone\\web\\src\\components\\BrandsNavs.tsx":"3","D:\\allinone\\web\\src\\components\\LinksContainer.tsx":"4","D:\\allinone\\web\\src\\components\\Link.tsx":"5","D:\\allinone\\web\\src\\hooks\\useApi.tsx":"6","D:\\allinone\\web\\src\\components\\AddLinkForm.tsx":"7","D:\\allinone\\web\\src\\services.tsx":"8","D:\\allinone\\web\\src\\firebase.ts":"9","D:\\allinone\\web\\src\\components\\Signup.tsx":"10","D:\\allinone\\web\\src\\contexts\\AuthContext.tsx":"11","D:\\allinone\\web\\src\\components\\App.tsx":"12","D:\\allinone\\web\\src\\components\\Login.tsx":"13","D:\\allinone\\web\\src\\components\\PrivateRoute.tsx":"14","D:\\allinone\\web\\src\\components\\Dashboard.tsx":"15"},{"size":1275,"mtime":1611146307222,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1125,"mtime":1610534862455,"results":"19","hashOfConfig":"17"},{"size":1699,"mtime":1611039151002,"results":"20","hashOfConfig":"17"},{"size":702,"mtime":1611039491088,"results":"21","hashOfConfig":"17"},{"size":1099,"mtime":1611039468445,"results":"22","hashOfConfig":"17"},{"size":2595,"mtime":1611075967895,"results":"23","hashOfConfig":"17"},{"size":821,"mtime":1610991650909,"results":"24","hashOfConfig":"17"},{"size":2379,"mtime":1611074560148,"results":"25","hashOfConfig":"17"},{"size":2713,"mtime":1610987569014,"results":"26","hashOfConfig":"17"},{"size":2993,"mtime":1610996406675,"results":"27","hashOfConfig":"17"},{"size":957,"mtime":1610984684928,"results":"28","hashOfConfig":"17"},{"size":2129,"mtime":1610986912962,"results":"29","hashOfConfig":"17"},{"size":524,"mtime":1610989690049,"results":"30","hashOfConfig":"17"},{"size":1295,"mtime":1610992087870,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"197x1xf",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"D:\\allinone\\web\\src\\index.tsx",[],["70","71"],"D:\\allinone\\web\\src\\reportWebVitals.ts",[],["72","73"],"D:\\allinone\\web\\src\\components\\BrandsNavs.tsx",[],"D:\\allinone\\web\\src\\components\\LinksContainer.tsx",["74"],"import React from \"react\";\r\nimport \"../css/LinksContainer.css\";\r\nimport Link, { LinkI } from \"./Link\";\r\nimport { apiStates, useApi } from \"../hooks/useApi\";\r\nimport axios from \"axios\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\ninterface PropsI {\r\n  //   links: LinkI[];\r\n  brandName: string;\r\n  forceBit: number;\r\n  forceRefresh: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\nconst deleteLink = async (\r\n  id: number,\r\n  token: string\r\n): Promise<{ res: boolean }> => {\r\n  const url = `http://localhost:8032/api/delete/${id}`;\r\n  try {\r\n    const { data } = await axios({\r\n      url: url,\r\n      method: \"delete\",\r\n      headers: {\r\n        \"auth-token\": token,\r\n      },\r\n    });\r\n    return { res: true };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { res: false };\r\n  }\r\n};\r\n\r\nexport default function LinksContainer({\r\n  brandName,\r\n  forceRefresh,\r\n  forceBit,\r\n}: PropsI) {\r\n  const { state, error, dataArray } = useApi(\r\n    `http://localhost:8032/api/links/${brandName}`,\r\n    forceBit\r\n  );\r\n\r\n  const { currentUser } = useAuth();\r\n\r\n  const handleDelLink = async (id: number) => {\r\n    const { res } = await deleteLink(id, currentUser![\"auth-token\"]);\r\n    if (res) {\r\n      forceRefresh((prevState) => prevState + 1);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  switch (state) {\r\n    case apiStates.ERROR:\r\n      return <p>ERROR: {error || \"General error\"}</p>;\r\n    case apiStates.SUCCESS:\r\n      return (\r\n        <div className=\"LinksContainer-div\">\r\n          {dataArray.map((link: LinkI) => (\r\n            <Link link={link} key={link.id} handleDel={handleDelLink} />\r\n          ))}\r\n        </div>\r\n      );\r\n    default:\r\n      return <p>loading..</p>;\r\n  }\r\n}\r\n","D:\\allinone\\web\\src\\components\\Link.tsx",[],"D:\\allinone\\web\\src\\hooks\\useApi.tsx",[],["75","76"],"D:\\allinone\\web\\src\\components\\AddLinkForm.tsx",[],"D:\\allinone\\web\\src\\services.tsx",["77"],"import axios from \"axios\";\r\n\r\ninterface AddLinkData {\r\n  url: string;\r\n  note?: string;\r\n  remindat?: string;\r\n  needRemind?: boolean;\r\n}\r\n\r\nexport async function addLink(dataFields: AddLinkData, token: string) {\r\n  try {\r\n    const { data } = await axios({\r\n      method: \"post\",\r\n      url: \"http://localhost:8032/api/add\",\r\n      headers: {\r\n        \"auth-token\": token,\r\n      },\r\n      data: dataFields,\r\n    });\r\n\r\n    return { res: true };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function listOfbrands(token: string) {\r\n  try {\r\n    const { data } = await axios({\r\n      method: \"get\",\r\n      url: \"http://localhost:8032/api/company\",\r\n      headers: {\r\n        \"auth-token\": token,\r\n      },\r\n    });\r\n\r\n    return { res: true, data: data };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n","D:\\allinone\\web\\src\\firebase.ts",["78","79"],"import firebase from \"firebase/app\";\r\nimport \"firebase/analytics\";\r\nimport \"firebase/messaging\";\r\nimport axios from \"axios\";\r\nimport { getTokenSourceMapRange } from \"typescript\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDDi6t_zCvkGKeh90u0cvxVm7hml8K6xbs\",\r\n  authDomain: \"allinone-1e128.firebaseapp.com\",\r\n  projectId: \"allinone-1e128\",\r\n  storageBucket: \"allinone-1e128.appspot.com\",\r\n  messagingSenderId: \"370418206823\",\r\n  appId: \"1:370418206823:web:cf75fc5b65c8a9f5d12cc2\",\r\n  measurementId: \"G-HDBSJ90RVF\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nconst messaging = firebase.messaging();\r\nexport const getToken = async () => {\r\n  const authtoken = localStorage.getItem(\"alino\");\r\n  if (!authtoken) {\r\n    return;\r\n  }\r\n  return messaging\r\n    .getToken({\r\n      vapidKey:\r\n        \"BChOi7EhJZ51GU_IbsyE15PfcQ84PUN87kSAOmx0IoDLaAy1d1nuVvhLTSyyd0GLfZk4QRY8Hp0KAgjjFHAStug\",\r\n    })\r\n    .then(async (currentToken) => {\r\n      if (currentToken) {\r\n        console.log(\"current token for client: \", currentToken);\r\n        try {\r\n          await sendFCMTokenToServer(currentToken, authtoken);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n        // Track the token -> client mapping, by sending to backend server\r\n        // show on the UI that permission is secured\r\n      } else {\r\n        console.log(\r\n          \"No registration token available. Request permission to generate one.\"\r\n        );\r\n\r\n        // shows on the UI that permission is required\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"An error occurred while retrieving token. \", err);\r\n      // catch error while creating client token\r\n    });\r\n};\r\n\r\nconst sendFCMTokenToServer = async (\r\n  currentToken: string,\r\n  authtoken: string\r\n) => {\r\n  try {\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"http://localhost:8032/api/subscribe\",\r\n      data: {\r\n        fcmtoken: currentToken,\r\n      },\r\n      headers: {\r\n        \"auth-token\": authtoken,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// export const onMessageListener = () =>\r\n//   new Promise((resolve) => {\r\n//     messaging.onMessage((payload) => {\r\n//       resolve(payload);\r\n//     });\r\n//   });\r\n\r\nmessaging.onMessage((payload) => {\r\n  console.log(\"Message received. \", payload);\r\n});\r\n\r\n// getToken();\r\n","D:\\allinone\\web\\src\\components\\Signup.tsx",[],"D:\\allinone\\web\\src\\contexts\\AuthContext.tsx",[],"D:\\allinone\\web\\src\\components\\App.tsx",[],"D:\\allinone\\web\\src\\components\\Login.tsx",["80"],"import React, { useRef } from \"react\";\r\nimport { Button, Card, Form, Alert, FormControl } from \"react-bootstrap\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function SignUp() {\r\n  const emailRef = useRef<HTMLInputElement>(null);\r\n  const passwordRef = useRef<HTMLInputElement>(null);\r\n  const { login } = useAuth();\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      setError(\"\");\r\n      setLoading(true);\r\n      await login!(emailRef.current!.value, passwordRef.current!.value);\r\n      history.push(\"/\");\r\n    } catch {\r\n      setError(\"Failed to login\");\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">Log In</h2>\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group id=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                name=\"email\"\r\n                ref={emailRef}\r\n                placeholder=\"Enter email\"\r\n                required\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group id=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                name=\"password\"\r\n                ref={passwordRef}\r\n                placeholder=\"Enter Password\"\r\n                required\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n              Log In\r\n            </Button>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        Don't have an account? <Link to=\"/signup\">Sign Up</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\allinone\\web\\src\\components\\PrivateRoute.tsx",[],"D:\\allinone\\web\\src\\components\\Dashboard.tsx",["81"],"import React, { useEffect, useState } from \"react\";\nimport AddLink from \"./AddLinkForm\";\nimport BrandsNavs from \"./BrandsNavs\";\nimport LinksContainer from \"./LinksContainer\";\nimport { listOfbrands } from \"../services\";\nimport { Container } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nfunction Dashboard() {\n  const [brandName, setBrand] = useState(\"\");\n  const { currentUser } = useAuth();\n\n  //by default one brand will be automatically selected\n  useEffect(() => {\n    listOfbrands(currentUser![\"auth-token\"])\n      .then(({ data }) => {\n        if (data.length !== 0) {\n          setBrand(data[0].company);\n        }\n      })\n      .catch();\n  }, []);\n\n  //this hook is used to force refresh the app\n  const [forceBit, forceRefresh] = useState(1);\n  return (\n    <Container className=\"d-flex align-items-center justify-content-center\">\n      <div className=\"App w-100\">\n        <AddLink forceRefresh={forceRefresh} forceBit={forceBit} />\n        <BrandsNavs\n          active={brandName}\n          handleClick={setBrand}\n          forceBit={forceBit}\n        />\n        <LinksContainer\n          brandName={brandName}\n          forceRefresh={forceRefresh}\n          forceBit={forceBit}\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default Dashboard;\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"82","replacedBy":"86"},{"ruleId":"84","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":21,"column":13,"nodeType":"90","messageId":"91","endLine":21,"endColumn":17},{"ruleId":"82","replacedBy":"92"},{"ruleId":"84","replacedBy":"93"},{"ruleId":"88","severity":1,"message":"89","line":12,"column":13,"nodeType":"90","messageId":"91","endLine":12,"endColumn":17},{"ruleId":"88","severity":1,"message":"94","line":5,"column":10,"nodeType":"90","messageId":"91","endLine":5,"endColumn":32},{"ruleId":"88","severity":1,"message":"95","line":60,"column":11,"nodeType":"90","messageId":"91","endLine":60,"endColumn":14},{"ruleId":"88","severity":1,"message":"96","line":2,"column":37,"nodeType":"90","messageId":"91","endLine":2,"endColumn":48},{"ruleId":"97","severity":1,"message":"98","line":22,"column":6,"nodeType":"99","endLine":22,"endColumn":8,"suggestions":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],["101"],["102"],"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar",["101"],["102"],"'getTokenSourceMapRange' is defined but never used.","'res' is assigned a value but never used.","'FormControl' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.","ArrayExpression",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},"Update the dependencies array to be: [currentUser]",{"range":"106","text":"107"},[682,684],"[currentUser]"]